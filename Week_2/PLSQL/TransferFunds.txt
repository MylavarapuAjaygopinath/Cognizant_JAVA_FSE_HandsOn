CREATE OR REPLACE PROCEDURE TransferFunds(
    from_account_id IN NUMBER,
    to_account_id IN NUMBER,
    transfer_amount IN NUMBER
) IS
    from_balance NUMBER;
    insufficient_funds EXCEPTION;
BEGIN
    -- Lock and get balance from source account
    SELECT Balance INTO from_balance 
    FROM Accounts 
    WHERE AccountID = from_account_id 
    FOR UPDATE;

    -- Check if sufficient balance
    IF from_balance < transfer_amount THEN
        RAISE insufficient_funds;
    END IF;

    -- Deduct from source
    UPDATE Accounts
    SET Balance = Balance - transfer_amount,
        LastModified = SYSDATE
    WHERE AccountID = from_account_id;

    -- Add to destination
    UPDATE Accounts
    SET Balance = Balance + transfer_amount,
        LastModified = SYSDATE
    WHERE AccountID = to_account_id;

    -- Record transaction (optional enhancement)
    INSERT INTO Transactions (TransactionID, AccountID, TransactionDate, Amount, TransactionType)
    VALUES (Transactions_seq.NEXTVAL, from_account_id, SYSDATE, transfer_amount, 'Debit');

    INSERT INTO Transactions (TransactionID, AccountID, TransactionDate, Amount, TransactionType)
    VALUES (Transactions_seq.NEXTVAL, to_account_id, SYSDATE, transfer_amount, 'Credit');

    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Successfully transferred ' || transfer_amount || ' from account ' ||
                         from_account_id || ' to account ' || to_account_id);

EXCEPTION
    WHEN insufficient_funds THEN
        DBMS_OUTPUT.PUT_LINE('Error: Insufficient funds in source account.');
        ROLLBACK;
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: One or both accounts not found.');
        ROLLBACK;
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Unexpected error: ' || SQLERRM);
        ROLLBACK;
END;
/
